Prompt: Erstelle ein leistungsstarkes Admin-Interface f√ºr Entwickler zur Verwaltung aller Galerien und Nutzer
üß© Ziel:
Ein zentrales, √ºbersichtliches Admin-Dashboard, das dir als Entwickler/Admin vollst√§ndige Kontrolle √ºber alle registrierten Nutzer, ihre Galerien, Profile, individuellen Links und Inhalte gibt.

üì¶ Funktionale Anforderungen:
Dashboard-Startseite:
Zeige eine Liste aller registrierten Benutzer.

Spalten: Profilbild, Profilname, Email, User ID, Galerien, Letzter Login, Link zur Galerie, Thema, Status.

Jeder Eintrag klickbar ‚Üí √∂ffnet Detailansicht des Benutzers.

Benutzer-Detailansicht:
Profilbild (gr√∂√üer), Bio, Profilname (editierbar).

Liste aller Galerien dieses Users.

F√ºr jede Galerie:

Galerie-ID / Link

Aktives Theme (Wedding, Vacation, Birthday) ‚Äì ausw√§hlbar per Dropdown.

Erstellungsdatum, Anzahl an Medieninhalten, isPublic Status.

Button zum √ñffnen der Galerie im Frontend.

M√∂glichkeit zur Deaktivierung / Archivierung eines Users oder Galerie.

M√∂glichkeit zum Zur√ºcksetzen des Profilnamens.

Gallerie-√úbersicht (Admin View):
Zeige alle existierenden Galerien (pagination-f√§hig).

Filtern nach Theme, User ID, Link, Erstellungsdatum.

Schnellzugriff auf Galerie-Link, Theme-Wechsel, oder Medieninhalt-Explorer.

Media-Explorer (Dateiansicht):
Zugriff auf alle Medieninhalte einer Galerie (aus Firebase Storage).

Thumbnail-Vorschau.

Download-, L√∂sch- und Vorschau-Funktion.

Suche & Filter:
Globale Suche nach: User ID, Profilname, Galerie-Link, Email.

Filter nach: Theme, Erstellungsdatum, Aktivit√§t.

Auth & Sicherheit:
Nur f√ºr Entwickler/Administratoren via spezieller Role (admin: true in Firestore oder Firebase Auth Custom Claims).

Zugriff absichern (z.‚ÄØB. nur bei bestimmten UIDs oder Admin-Token).

üé® UI/UX-Vorschl√§ge:
Framework: React + Tailwind + ShadCN oder Material UI.

Layout:

Sidebar-Navigation (Users, Galleries, Storage, Settings).

Responsive Tabelle mit modalen Detail-Popups.

Dark Mode Support.

Icons: Lucide oder Heroicons f√ºr Actions (View, Edit, Delete, Open).

Statusindikatoren: Farben f√ºr Themes (Blau = Birthday, Gr√ºn = Vacation, Rosa = Wedding).

üîß Technische Umsetzung:
Backend: Firebase Firestore + Firebase Auth + Firebase Storage.

API Layer: Abstraktion √ºber Firebase SDK (z.‚ÄØB. getAllUsers(), getGalleriesByUserId(), etc.).

Admin-Auth: Nur Zugriff mit admin-Flag oder speziellem uid.

‚úÖ Akzeptanzkriterien:
Du kannst als Entwickler:

Jeden User inkl. Galerie(n) vollst√§ndig einsehen.

Jeden Galerie-Link aufrufen und Thema wechseln.

Medieninhalte ansehen und verwalten.

√Ñnderungen am Profilnamen oder Bio zentral durchf√ºhren.

√Ñnderungen werden in Firestore und Firebase Storage korrekt synchronisiert.

Keine Daten eines Users sind f√ºr andere User zug√§nglich ‚Äì nur f√ºr Admin.